package com.killercraft.jimy.Listeners;import com.killercraft.jimy.Manager.CustomShopHolder;import org.bukkit.Material;import org.bukkit.entity.HumanEntity;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import org.bukkit.event.Listener;import org.bukkit.event.inventory.ClickType;import org.bukkit.event.inventory.InventoryClickEvent;import org.bukkit.event.inventory.InventoryCloseEvent;import org.bukkit.event.inventory.InventoryDragEvent;import org.bukkit.inventory.Inventory;import org.bukkit.inventory.InventoryHolder;import org.bukkit.inventory.ItemStack;import org.bukkit.inventory.meta.ItemMeta;import static com.killercraft.jimy.CustomShop.*;import static com.killercraft.jimy.Utils.CSUtil.clickShop;import static com.killercraft.jimy.Utils.CSUtil.closeShop;public class CSInvListener implements Listener {    /**     * 处理玩家点击物品的事件     *     * @param event 点击事件对象     */    @EventHandler    public void onClick(InventoryClickEvent event) {        Inventory clickedInventory = event.getInventory();        String inventoryTitle = null;        InventoryHolder inventoryHolder = clickedInventory.getHolder();        // 检查是否为自定义商店界面        if (inventoryHolder instanceof CustomShopHolder) {            inventoryTitle = ((CustomShopHolder) inventoryHolder).getTitle();        }        // 检查标题是否以 "[E]" 开头        if (inventoryTitle != null && inventoryTitle.startsWith("[E]")) {            HumanEntity clicker = event.getWhoClicked();            // 确保点击者为玩家            if (clicker instanceof Player) {                Player player = (Player) clicker;                ClickType clickType = event.getClick();                // 检查是否为 SHIFT_RIGHT、NUMBER_KEY 或 SHIFT_LEFT 点击                if (clickType == ClickType.SHIFT_RIGHT || clickType == ClickType.NUMBER_KEY || clickType == ClickType.SHIFT_LEFT) {                    event.setCancelled(true);                    player.sendMessage(langMap.get("NoShift"));                    return; // 取消事件处理并返回                }                // 检查点击的槽位是否超出界面大小                if (event.getRawSlot() >= clickedInventory.getSize()) {                    return; // 如果超出界面大小则退出方法                }                ItemStack cursorItem = event.getCursor();                // 检查光标中的物品是否为空                if (cursorItem == null || cursorItem.getType() == Material.AIR) {                    return; // 如果为空则退出方法                }                // 检查光标中的物品是否为商店物品                if (isNotShopItem(cursorItem)) {                    event.setCancelled(true);                    player.sendMessage(langMap.get("NoShopItem"));                }            }        } else if (inventoryTitle != null && cancelSet.contains(inventoryTitle)) {            HumanEntity clicker = event.getWhoClicked();            // 确保点击者为玩家            if (clicker instanceof Player) {                Player player = (Player) clicker;                event.setCancelled(true);                // 检查是否在点击冷却中                if (invClickCooldownMap.containsKey(player)) {                    player.sendMessage(langMap.get("NoClick"));                    return;                } else {                    invClickCooldownMap.put(player, 3); // 设置点击冷却时间                }                int slot = event.getRawSlot();                ItemStack clickedItem = event.getCurrentItem();                // 检查当前槽位中的物品是否存在且具有元数据                if (clickedItem == null || !clickedItem.hasItemMeta()) {                    return; // 如果不存在元数据则退出方法                }                // 处理商店物品点击事件                clickShop(inventoryTitle, player, slot);            }        }    }    /**     * 处理玩家关闭界面的事件     *     * @param event 关闭界面事件对象     */    @EventHandler    public void onClose(InventoryCloseEvent event) {        Inventory closedInventory = event.getInventory();        String inventoryTitle = null;        InventoryHolder inventoryHolder = closedInventory.getHolder();        // 检查是否为自定义商店界面        if (inventoryHolder instanceof CustomShopHolder) {            inventoryTitle = ((CustomShopHolder) inventoryHolder).getTitle();        }        // 检查标题是否以 "[E]" 开头        if (inventoryTitle != null && inventoryTitle.startsWith("[E]")) {            String shopName = inventoryTitle.replace("[E]", "");            // 关闭商店界面            closeShop(shopName, closedInventory);        }    }    /**     * 处理玩家拖拽物品的事件     *     * @param event 拖拽物品事件对象     */    @EventHandler    public void onDrag(InventoryDragEvent event) {        Inventory draggedInventory = event.getInventory();        String inventoryTitle = null;        InventoryHolder inventoryHolder = draggedInventory.getHolder();        // 检查是否为自定义商店界面        if (inventoryHolder instanceof CustomShopHolder) {            inventoryTitle = ((CustomShopHolder) inventoryHolder).getTitle();        }        // 检查标题是否以 "[E]" 开头        if (inventoryTitle != null && inventoryTitle.startsWith("[E]")) {            HumanEntity humanEntity = event.getWhoClicked();            // 检查是否为玩家            if (humanEntity instanceof Player) {                Player player = (Player) humanEntity;                ItemStack oldCursor = event.getOldCursor();                // 检查拖拽的物品是否为空                if (oldCursor == null || oldCursor.getType() == Material.AIR) {                    return;                }                // 检查拖拽的物品是否为商店物品                for (int slot : event.getRawSlots()) {                    if (slot < draggedInventory.getSize() && isNotShopItem(oldCursor)) {                        event.setCancelled(true);                        player.sendMessage(langMap.get("NoShopItem"));                        return;                    }                }            }        } else if (inventoryTitle != null && cancelSet.contains(inventoryTitle)) {            event.setCancelled(true);        }    }    /**     * 检查物品是否为商店物品     *     * @param stack 要检查的物品堆栈     * @return 如果物品不是商店物品，则返回 true；否则返回 false     */    private boolean isNotShopItem(ItemStack stack) {        // 检查物品是否为空或无物品元数据        if (stack == null || !stack.hasItemMeta()) {            return true;        }        ItemMeta meta = stack.getItemMeta();        // 检查物品是否有物品描述        if (meta.hasLore()) {            // 遍历物品描述，检查是否有以 "b" 开头且包含 "~" 的描述            for (String lore : meta.getLore()) {                if (lore.startsWith("b") && lore.contains("~")) {                    return false; // 如果存在以 "b" 开头且包含 "~" 的描述，则不是商店物品，返回 false                }            }        }        return true; // 如果没有符合条件的描述，则是商店物品，返回 true    }}