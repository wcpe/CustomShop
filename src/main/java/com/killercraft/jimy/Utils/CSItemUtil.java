package com.killercraft.jimy.Utils;import com.killercraft.jimy.CustomShopAPI;import org.bukkit.Material;import org.bukkit.entity.Player;import org.bukkit.inventory.Inventory;import org.bukkit.inventory.ItemStack;import org.bukkit.inventory.PlayerInventory;import org.bukkit.inventory.meta.ItemMeta;import top.wcpe.customshop.util.InventoryUtil;import java.util.HashMap;import java.util.List;import java.util.function.Consumer;import java.util.function.Supplier;import static com.killercraft.jimy.CustomShop.*;public class CSItemUtil {    /**     * 检查玩家背包中是否包含指定名称的物品，且数量达到指定值     *     * @param name   物品的显示名称     * @param need   需要的物品数量     * @param player 玩家对象     * @return 如果玩家背包中包含足够数量的指定物品，返回 true；否则返回 false     */    public static boolean checkItemContainsNameNeed(String name, int need, Player player) {        return checkItemPropertyNeed(player.getInventory(), name, null, need);    }    /**     * 检查玩家背包中是否包含指定名称的物品，且数量达到指定值     *     * @param name   物品的显示名称     * @param need   需要的物品数量     * @param player 玩家对象     * @return 如果玩家背包中包含足够数量的指定物品，返回 true；否则返回 false     */    public static boolean checkItemNeed(String name, int need, Player player) {        return checkItemPropertyNeed(player.getInventory(), name, null, need);    }    /**     * 检查玩家背包中是否包含指定名称和指定附魔的物品，且数量达到指定值     *     * @param name     物品的显示名称     * @param loreNeed 物品必须包含的附魔列表，用分号分隔     * @param need     需要的物品数量     * @param player   玩家对象     * @return 如果玩家背包中包含足够数量的指定物品，返回 true；否则返回 false     */    public static boolean checkItemAndLoreNeed(String name, String loreNeed, int need, Player player) {        return checkItemPropertyNeed(player.getInventory(), name, loreNeed, need);    }    /**     * 检查玩家背包中是否包含指定附魔的物品，且数量达到指定值     *     * @param loreNeed 物品必须包含的附魔列表，用分号分隔     * @param need     需要的物品数量     * @param player   玩家对象     * @return 如果玩家背包中包含足够数量的指定物品，返回 true；否则返回 false     */    public static boolean checkItemLoreNeed(String loreNeed, int need, Player player) {        return checkItemPropertyNeed(player.getInventory(), null, loreNeed, need);    }    /**     * 检查玩家背包中是否包含指定属性的物品，且数量达到指定值     *     * @param inventory 玩家的背包     * @param name      物品的显示名称     * @param loreNeed  物品必须包含的附魔列表，用分号分隔     * @param need      需要的物品数量     * @return 如果玩家背包中包含足够数量的指定物品，返回 true；否则返回 false     */    private static boolean checkItemPropertyNeed(Inventory inventory, String name, String loreNeed, int need) {        int totalAmount = 0;        for (ItemStack stack : inventory) {            if (stack != null && stack.hasItemMeta()) {                ItemMeta meta = stack.getItemMeta();                if (name != null && meta.hasDisplayName() && meta.getDisplayName().contains(name)) {                    totalAmount += stack.getAmount();                }                if (loreNeed != null && meta.hasLore()) {                    List<String> lores = meta.getLore();                    boolean flag = name != null && name.equals(meta.getDisplayName());                    for (String s : loreNeed.split(";")) {                        if (!lores.contains(s)) {                            flag = false;                            break;                        }                    }                    if (flag) {                        totalAmount += stack.getAmount();                    }                }            }        }        return totalAmount >= need;    }    public static boolean checkOnlyIdNeed(int id, int dur, int need, Player player) {        Inventory inv = player.getInventory();        int i = 0;        for (ItemStack stack : inv) {            if (stack != null && stack.getTypeId() == id) {                ItemMeta im = stack.getItemMeta();                if (im.hasDisplayName()) {                    continue;                }                if (im.hasLore()) {                    continue;                }                if (dur >= 0) {                    int d = stack.getDurability();                    if (d == dur) {                        i += stack.getAmount();                    }                } else {                    i += stack.getAmount();                }            }        }        return i >= need;    }    public static boolean checkIdNeed(int id, int dur, int need, Player player) {        Inventory inv = player.getInventory();        int i = 0;        for (ItemStack stack : inv) {            if (stack != null && stack.getTypeId() == id) {                if (dur >= 0) {                    int d = stack.getDurability();                    if (d == dur) {                        i += stack.getAmount();                    }                } else {                    i += stack.getAmount();                }            }        }        return i >= need;    }    public static boolean checkInvNeed(int need, Player player) {        PlayerInventory inv = player.getInventory();        int a = 0;        for (int i = 0; i < inv.getSize(); i++) {            ItemStack stack = inv.getItem(i);            if (stack == null || stack.getType() == Material.AIR) {                a++;            }        }        return a >= need;    }    public static void takeItemLoreNeed(String loreNeed, int need, Player player) {        InventoryUtil.clearInventoryItem(player, loreNeed, need);    }    public static void takePlayerKeyLimit(String pName, String key, int i) {        HashMap<String, Integer> map = limitData.getOrDefault(pName, new HashMap<>());        if (map.containsKey(key)) {            map.put(key, map.get(key) + i);        } else {            map.put(key, 1);        }        limitData.put(pName, map);    }    public static int getPlayerKeyLimit(String pName, String key) {        if (limitData.containsKey(pName)) {            HashMap<String, Integer> map = limitData.get(pName);            if (map.containsKey(key)) {                return map.get(key);            }        }        return 0;    }    public static void takeItemAndLoreNeed(String name, String loreNeed, int need, Player player) {        Inventory inv = player.getInventory();        for (int i = 0; i < 36; i++) {            ItemStack stack = inv.getItem(i);            if (stack != null && stack.hasItemMeta()) {                ItemMeta meta = stack.getItemMeta();                if (meta.hasLore()) {                    List<String> lores = meta.getLore();                    boolean flag = name.equals(meta.getDisplayName());                    for (String s : loreNeed.split(";")) {                        if (!lores.contains(s)) {                            flag = false;                            break;                        }                    }                    if (flag) {                        int amount = stack.getAmount();                        if (amount > need) {                            amount -= need;                            stack.setAmount(amount);                            inv.setItem(i, stack);                        } else {                            need -= amount;                            inv.setItem(i, null);                        }                    }                }            }        }        PlayerInventory pi = player.getInventory();        ItemStack deputy = pi.getItemInOffHand();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasLore()) {                List<String> lores = meta.getLore();                boolean flag = name.equals(meta.getDisplayName());                for (String s : loreNeed.split(";")) {                    if (!lores.contains(s)) {                        flag = false;                        break;                    }                }                if (flag) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setItemInOffHand(deputy);                    } else {                        pi.setItemInOffHand(null);                    }                }            }        }        deputy = pi.getHelmet();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasLore()) {                List<String> lores = meta.getLore();                boolean flag = name.equals(meta.getDisplayName());                for (String s : loreNeed.split(";")) {                    if (!lores.contains(s)) {                        flag = false;                        break;                    }                }                if (flag) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setHelmet(deputy);                    } else {                        pi.setHelmet(null);                    }                }            }        }        deputy = pi.getChestplate();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasLore()) {                List<String> lores = meta.getLore();                boolean flag = name.equals(meta.getDisplayName());                for (String s : loreNeed.split(";")) {                    if (!lores.contains(s)) {                        flag = false;                        break;                    }                }                if (flag) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setChestplate(deputy);                    } else {                        pi.setChestplate(null);                    }                }            }        }        deputy = pi.getLeggings();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasLore()) {                List<String> lores = meta.getLore();                boolean flag = name.equals(meta.getDisplayName());                for (String s : loreNeed.split(";")) {                    if (!lores.contains(s)) {                        flag = false;                        break;                    }                }                if (flag) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setLeggings(deputy);                    } else {                        pi.setLeggings(null);                    }                }            }        }        deputy = pi.getBoots();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasLore()) {                List<String> lores = meta.getLore();                boolean flag = name.equals(meta.getDisplayName());                for (String s : loreNeed.split(";")) {                    if (!lores.contains(s)) {                        flag = false;                        break;                    }                }                if (flag) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setBoots(deputy);                    } else {                        pi.setBoots(null);                    }                }            }        }    }    public static void takeItemNeed(String name, int need, Player player, boolean isContains) {        Inventory inv = player.getInventory();        for (int i = 0; i < 36; i++) {            ItemStack stack = inv.getItem(i);            if (stack != null && stack.hasItemMeta()) {                ItemMeta meta = stack.getItemMeta();                if (meta.hasDisplayName()) {                    boolean flag;                    if (isContains) {                        flag = meta.getDisplayName().contains(name);                    } else {                        flag = name.equals(meta.getDisplayName());                    }                    if (flag) {                        int amount = stack.getAmount();                        if (amount > need) {                            amount -= need;                            stack.setAmount(amount);                            inv.setItem(i, stack);                            break;                        } else {                            need -= amount;                            inv.setItem(i, null);                        }                    }                }            }        }        PlayerInventory pi = player.getInventory();        ItemStack deputy = pi.getItemInOffHand();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasDisplayName()) {                if (name.equals(meta.getDisplayName())) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setItemInOffHand(deputy);                    } else {                        pi.setItemInOffHand(null);                    }                }            }        }        deputy = pi.getHelmet();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasDisplayName()) {                if (name.equals(meta.getDisplayName())) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setHelmet(deputy);                    } else {                        pi.setHelmet(null);                    }                }            }        }        deputy = pi.getChestplate();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasDisplayName()) {                if (name.equals(meta.getDisplayName())) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setChestplate(deputy);                    } else {                        pi.setChestplate(null);                    }                }            }        }        deputy = pi.getLeggings();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasDisplayName()) {                if (name.equals(meta.getDisplayName())) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setLeggings(deputy);                    } else {                        pi.setLeggings(null);                    }                }            }        }        deputy = pi.getBoots();        if (deputy != null && deputy.hasItemMeta()) {            ItemMeta meta = deputy.getItemMeta();            if (meta.hasDisplayName()) {                if (name.equals(meta.getDisplayName())) {                    int amount = deputy.getAmount();                    if (amount > need) {                        amount -= need;                        deputy.setAmount(amount);                        pi.setBoots(deputy);                    } else {                        pi.setBoots(null);                    }                }            }        }    }    public static void takeOnlyIdNeed(int id, int dur, int need, Player player) {        Inventory inv = player.getInventory();        PlayerInventory pi = player.getInventory();        for (int i = 0; i < 36; i++) {            ItemStack stack = inv.getItem(i);            if (stack != null && stack.getTypeId() == id) {                ItemMeta itemMeta = stack.getItemMeta();                if (itemMeta.hasDisplayName() || itemMeta.hasLore()) {                    continue;                }                if (dur >= 0) {                    int d = stack.getDurability();                    if (d != dur) {                        continue;                    }                }                int amount = stack.getAmount();                if (amount > need) {                    stack.setAmount(amount - need);                    inv.setItem(i, stack);                    return;                } else {                    need -= amount;                    inv.setItem(i, null);                }            }        }        // Check offhand, helmet, chestplate, leggings, and boots        checkOnlyIdAndUpdateItemInSlot(pi, id, need, pi::getItemInOffHand, pi::setItemInOffHand);        checkOnlyIdAndUpdateItemInSlot(pi, id, need, pi::getHelmet, pi::setHelmet);        checkOnlyIdAndUpdateItemInSlot(pi, id, need, pi::getChestplate, pi::setChestplate);        checkOnlyIdAndUpdateItemInSlot(pi, id, need, pi::getLeggings, pi::setLeggings);        checkOnlyIdAndUpdateItemInSlot(pi, id, need, pi::getBoots, pi::setBoots);    }    private static void checkOnlyIdAndUpdateItemInSlot(PlayerInventory pi, int id, int need, Supplier<ItemStack> getter, Consumer<ItemStack> setter) {        ItemStack itemStack = getter.get();        if (itemStack != null && itemStack.getTypeId() == id) {            ItemMeta itemMeta = itemStack.getItemMeta();            if (itemMeta.hasDisplayName() || itemMeta.hasLore()) {                return;            }            int amount = itemStack.getAmount();            if (amount > need) {                itemStack.setAmount(amount - need);                setter.accept(itemStack);            } else {                setter.accept(null);            }        }    }    public static void takeIdNeed(int id, int dur, int need, Player player) {        Inventory inv = player.getInventory();        for (int i = 0; i < 36; i++) {            ItemStack stack = inv.getItem(i);            if (stack != null && stack.getTypeId() == id) {                if (dur >= 0) {                    int d = stack.getDurability();                    if (d == dur) {                        int amount = stack.getAmount();                        if (amount > need) {                            amount -= need;                            stack.setAmount(amount);                            inv.setItem(i, stack);                            break;                        } else {                            need -= amount;                            inv.setItem(i, null);                        }                    }                } else {                    int amount = stack.getAmount();                    if (amount > need) {                        amount -= need;                        stack.setAmount(amount);                        inv.setItem(i, stack);                        break;                    } else {                        need -= amount;                        inv.setItem(i, null);                    }                }            }        }        PlayerInventory pi = player.getInventory();        ItemStack deputy = pi.getItemInOffHand();        if (deputy != null && deputy.getTypeId() == id) {            int amount = deputy.getAmount();            if (amount > need) {                amount -= need;                deputy.setAmount(amount);                pi.setItemInOffHand(deputy);            } else {                pi.setItemInOffHand(null);            }        }        deputy = pi.getHelmet();        if (deputy != null && deputy.getTypeId() == id) {            int amount = deputy.getAmount();            if (amount > need) {                amount -= need;                deputy.setAmount(amount);                pi.setHelmet(deputy);            } else {                pi.setHelmet(null);            }        }        deputy = pi.getChestplate();        if (deputy != null && deputy.getTypeId() == id) {            int amount = deputy.getAmount();            if (amount > need) {                amount -= need;                deputy.setAmount(amount);                pi.setChestplate(deputy);            } else {                pi.setChestplate(null);            }        }        deputy = pi.getLeggings();        if (deputy != null && deputy.getTypeId() == id) {            int amount = deputy.getAmount();            if (amount > need) {                amount -= need;                deputy.setAmount(amount);                pi.setLeggings(deputy);            } else {                pi.setLeggings(null);            }        }        deputy = pi.getBoots();        if (deputy != null && deputy.getTypeId() == id) {            int amount = deputy.getAmount();            if (amount > need) {                amount -= need;                deputy.setAmount(amount);                pi.setBoots(deputy);            } else {                pi.setBoots(null);            }        }    }    public static boolean checkCostNeed(String costId, int need, Player player) {        String name = player.getName();        if (playerData.containsKey(name)) {            HashMap<String, Integer> costs = playerData.get(name);            if (costs.containsKey(costId)) {                return costs.get(costId) >= need;            }        }        return false;    }    public static void takeCostNeed(String costId, int need, Player player) {        CustomShopAPI.delCost(player.getName(), costId, need);    }    public static boolean checkEcoNeed(int need, Player player) {        return economy.getBalance(player) >= need;    }    public static void takeEcoNeed(int need, Player player) {        economy.withdrawPlayer(player, need);    }    public static boolean checkPointNeed(int need, Player player) {        if (poiLoad) {            return poi.look(player.getUniqueId()) >= need;        } else {            return false;        }    }    public static void takePointNeed(int need, Player player) {        if (poiLoad) {            poi.take(player.getUniqueId(), need);        }    }}