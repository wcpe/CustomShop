package com.killercraft.jimy.Utils;import java.util.HashMap;import static com.killercraft.jimy.CustomShop.*;public class CSCostUtil {    /**     * 给予玩家指定货币数量     *     * @param name   玩家名称     * @param costId 货币ID     * @param amount 给予的货币数量     * @return 包含成功消息的字符串，如果货币不存在则返回相应的失败消息     */    public static String giveCost(String name, String costId, int amount) {        // 检查玩家数据中是否包含该玩家        if (playerData.containsKey(name)) {            HashMap<String, Integer> playerCosts = playerData.get(name);            // 检查是否存在指定的货币            if (costMap.containsKey(costId)) {                // 如果玩家已经拥有该货币，则增加相应数量                if (playerCosts.containsKey(costId)) {                    playerCosts.put(costId, playerCosts.get(costId) + amount);                } else {                    // 否则，创建新的货币并设置数量                    playerCosts.put(costId, amount);                }                // 更新玩家的货币数据                playerData.put(name, playerCosts);                // 返回成功消息                return langMap.get("AddCost").replace("<cost>", costMap.get(costId)).replace("<value>", playerCosts.getOrDefault(costId, 0) + "");            } else {                // 如果指定的货币不存在，则返回相应的失败消息                return langMap.get("CostLose");            }        } else {            // 如果玩家数据中不存在该玩家，则创建新的玩家数据并添加货币            if (costMap.containsKey(costId)) {                HashMap<String, Integer> playerCosts = new HashMap<>();                playerCosts.put(costId, amount);                playerData.put(name, playerCosts);                // 返回成功消息                return langMap.get("AddCost").replace("<cost>", costMap.get(costId)).replace("<value>", playerCosts.getOrDefault(costId, 0) + "");            } else {                // 如果指定的货币不存在，则返回相应的失败消息                return langMap.get("CostLose");            }        }    }    /**     * 从玩家数据中减去指定货币数量     *     * @param name   玩家名称     * @param costId 货币ID     * @param amount 要减去的数量     * @return 如果成功减去指定数量的货币则返回true，否则返回false     */    public static boolean takeCost(String name, String costId, int amount) {        // 检查玩家数据中是否包含该玩家        if (!playerData.containsKey(name)) {            return false;        }        // 获取玩家的货币数据        HashMap<String, Integer> playerCosts = playerData.get(name);        // 检查是否存在指定的货币ID        if (!costMap.containsKey(costId)) {            return false;        }        // 检查玩家的货币数据中是否包含指定的货币ID        if (!playerCosts.containsKey(costId)) {            return false;        }        // 计算剩余的货币数量        int left = playerCosts.get(costId) - amount;        if (left < 0) {            // 如果剩余数量小于0，则返回false            return false;        }        // 更新玩家的货币数据并返回true        playerCosts.put(costId, left);        playerData.put(name, playerCosts);        return true;    }    /**     * 从玩家数据中减去指定货币数量，并返回操作结果消息     *     * @param name   玩家名称     * @param costId 货币ID     * @param amount 要减去的数量     * @return 操作结果消息     */    public static String delCost(String name, String costId, int amount) {        // 检查玩家数据中是否包含该玩家        if (!playerData.containsKey(name)) {            return langMap.get("DelCost").replace("<cost>", costMap.get(costId)).replace("<value>", "0");        }        // 获取玩家的货币数据        HashMap<String, Integer> playerCosts = playerData.get(name);        // 检查是否存在指定的货币ID        if (!costMap.containsKey(costId)) {            return langMap.get("CostLose");        }        // 获取指定货币ID的当前数量        int currentValue = playerCosts.getOrDefault(costId, 0);        // 计算剩余的货币数量        int left = currentValue - amount;        left = Math.max(left, 0); // 如果剩余数量小于0，则置为0        // 更新玩家的货币数据        playerCosts.put(costId, left);        playerData.put(name, playerCosts);        // 返回操作结果消息        return langMap.get("DelCost").replace("<cost>", costMap.get(costId)).replace("<value>", String.valueOf(left));    }    /**     * 检查玩家拥有的指定货币的数量     *     * @param name   玩家名称     * @param costId 货币ID     * @return 指定货币的数量，如果不存在则返回0     */    public static int checkCost(String name, String costId) {        // 检查玩家数据中是否包含该玩家        if (playerData.containsKey(name)) {            // 获取玩家的货币数据            HashMap<String, Integer> playerCosts = playerData.get(name);            // 检查玩家是否拥有指定货币            if (playerCosts.containsKey(costId)) {                // 返回玩家拥有的指定货币数量                return playerCosts.get(costId);            }        }        // 如果玩家数据中不存在指定货币，则返回0        return 0;    }}